{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This documentation is under development, as is the project it concerns. Some elements may be missing, superfluous, need to be modified or clarified.  </p> <p>In the event of problems or requests,  it is possible to open an issue :material-information-outline:{ title=\"As docker-znuny is a side project, little time is spent on it\" }</p>"},{"location":"#design","title":"Design","text":"<p>The aim of this project, centered on the znuny application, is to provide a reliable,  high-performance container image for quick and easy production release. </p> <p>This image and the various deployment methods provided in the repository are specifically  designed to be hosted on a Kubernetes platform.</p> <p>The various functionalities are designed for production use with a multitude of deployed instances.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Local users configuration</li> <li>Support for multiple databases<ul> <li>MariaDB</li> <li>PostgreSQL</li> </ul> </li> <li>Mailing configuration</li> <li>Ldap authentication configuration<ul> <li>Ldap agents authentication</li> <li>Ldap consumer authentication</li> </ul> </li> <li>Log outputs formatted in JSON and configurable between rsyslog and file outputs</li> <li>Configuration of Apache rewrite rules</li> </ul>"},{"location":"development/docker-znuny/","title":"Docker Znuny","text":""},{"location":"development/docker-znuny/#quick-start","title":"Quick start","text":"<p>The deployment of the development stack is managed with Docker Compose.  </p> <p>Create the file docker-compose.dev.yaml at the root of the project :</p> <pre><code>---\nversion: \"3\"\n\nnetworks:\n  net:\n\nvolumes:\n  pgsql:\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: ./znuny/6.5.8/Dockerfile\n    image: ghcr.io/fr-bez-aosc/znuny:alpha-6.5.8\n    container_name: znuny\n    environment:\n      ZNUNY_DATABASE_HOST: postgresql\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n    networks:\n      - net\n    ports:\n      - 8080:80\n    depends_on:\n      - db\n  db:\n    image: bitnami/postgresql:16\n    container_name: postgresql\n    user: root\n    environment:\n      POSTGRES_DB: znuny\n      POSTGRES_USER: znuny\n      POSTGRES_PASSWORD: password\n      POSTGRESQL_POSTGRES_PASSWORD: password\n    volumes:\n      - pgsql:/bitnami/postgresql/data\n    networks:\n      - net\n    ports:\n      - 5432:5432\n</code></pre> <p>After editing the file docker-compose.dev.yaml, deploy the database :</p> <pre><code>docker compose -f docker-compose.dev.yaml up -d db\n</code></pre> <p>Check the deployment like this :</p> <pre><code>docker compose logs -f db\n</code></pre> <p>Then, alter the privileges of the role Znuny :</p> <pre><code>docker compose exec -ti db psql -h 127.0.0.1 -U postgres -d znuny -p 5432 -c \"ALTER ROLE znuny WITH SUPERUSER;\"\n</code></pre> <p>Finally, deploy Znuny :</p> <pre><code>docker compose -f docker-compose.dev.yaml up -d app\n</code></pre> <p>Check the deployment like this :</p> <pre><code>docker compose logs -f app\n</code></pre>"},{"location":"development/helm-charts/","title":"Helm Charts","text":""},{"location":"development/helm-charts/#prerequisites","title":"Prerequisites","text":"<p>K3D is the tool choose to have a local kubernetes development cluster.  </p> <p>Install K3D with the next command :</p> <pre><code>curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash\n</code></pre> <p>Tips</p> <p>Refer to the documentation for other installation methods. Go to K3D documentation </p>"},{"location":"development/helm-charts/#create-a-development-cluster","title":"Create a development cluster","text":"<p>Use the following kind of configuration file of k3d to deploy a cluster.</p> k3d/cluster.yaml <p>The default domain used by the development cluster is znuny-dev-cluster. Ensure to add it at the local name resolution in the file /etc/hosts :</p> /etc/hosts<pre><code>127.0.0.1 znuny.domain.tld\n</code></pre> <p>Create the cluster :</p> <pre><code>k3d cluster create -c ./k3d/cluster.yaml\n</code></pre> <p>Delete cluster :</p> <pre><code>k3d cluster delete znuny-dev-cluster\n</code></pre>"},{"location":"development/helm-charts/#templating","title":"Templating","text":"<p>Create templates to check compliance of deployed resources from the project root :</p> <pre><code>helm template znuny ./helm\n</code></pre>"},{"location":"docker-znuny/v6.5.8/commands/","title":"Commands","text":"<p>Zcli is a simple command line interface built to manage Znuny's container.</p>"},{"location":"docker-znuny/v6.5.8/commands/#usage","title":"Usage","text":"<p>Zcli can be used as following :</p> <ul> <li><code>zcli COMMAND</code></li> <li><code>zcli [COMMAND] --help | -h</code></li> <li><code>zcli --version | -v</code></li> </ul>"},{"location":"docker-znuny/v6.5.8/commands/#global-commands","title":"Global commands","text":"<p>The are many main commands which can be run :</p> Commands Description <code>zcli config apache</code> Create virtualhosts <code>zcli config crons</code> Create all crons <code>zcli config database</code> Initialize the database <code>zcli config locales</code> Set locales <code>zcli config modules</code> Install application extensions <code>zcli config override</code> Override given configurations <code>zcli config timezone</code> Set the timezone <code>zcli config znuny</code> Create the main configuration file of Znuny <code>zcli check modules</code> Check Perl modules <code>zcli check config</code> Check the built configuration in database <code>zcli download</code> Download the znuny archive <code>zcli init all</code> Initialize all features <code>zcli init frontend</code> Initialize only the daemon and the webserver <code>zcli init background</code> Initialize only crons <code>zcli job migration database</code> Migrate an existing database from a working server <code>zcli job migration local</code> Migrate an existing database from a dump file on the local filesystem <code>zcli run apache2</code> Run Apache2 web server <code>zcli run cron</code> Run the crons of Znuny <code>zcli run daemon</code> Run the daemon of Znuny <code>zcli run znuny</code> Run Znuny <code>zcli upgrade</code> Ensure Znuny is up to date <code>zcli user admin</code> Create the admin user <code>zcli user permissions</code> Set the user permissions <code>zcli user system</code> Create the system user"},{"location":"docker-znuny/v6.5.8/commands/#global-options","title":"Global options","text":"<ul> <li><code>--help</code> ou <code>-h</code>: Show this help</li> <li><code>--version</code> ou <code>-v</code>: Show version number</li> </ul>"},{"location":"docker-znuny/v6.5.8/deployment/","title":"Deployment","text":""},{"location":"docker-znuny/v6.5.8/deployment/#required-configurations","title":"Required configurations","text":"<p>Not all features are active by default, and therefore don't necessarily need to be configured.</p> <p>Others, on the other hand, do require configuration during deployment.</p> <p>These features are as follows:</p> <ul> <li>Database configuration</li> </ul> <p>Example</p> <p>The most basic deployment should include an image and the environment variables for the database connection.</p> <p>If necessary, add configuration elements such as port forwarding, container name, hostname, etc.</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n      - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n</code></pre>"},{"location":"docker-znuny/v6.5.8/deployment/#optional-configurations","title":"Optional configurations","text":"<p>Deployment of the containerized application is fully configurable via environment variables.</p> <p>Each feature therefore has a variable capable of enabling or disabling it, and customizing its configuration.</p>"},{"location":"docker-znuny/v6.5.8/deployment/#mails","title":"Mails","text":"<p>Example</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n    - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n      ZNUNY_MAILING_TYPE: external\n      ZNUNY_MAILING_HOST: smpt.domain.tld\n      ZNUNY_MAILING_PORT: 25\n      ZNUNY_MAILING_USER: znuny\n      ZNUNY_MAILING_PASSWORD: password\n</code></pre> <p>Info</p> <p>To enable mail sending via an external server, the <code>ZNUNY_MAILING_TYPE</code> variable must be set to <code>external</code>. Otherwise, this variable will be set to <code>internal</code> and all other mail configuration variables will be ignored when the application will be configured.</p>"},{"location":"docker-znuny/v6.5.8/deployment/#logs","title":"Logs","text":"<p>Example</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n    - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n      ZNUNY_LOG_PATH: /var/log/znuny\n</code></pre> <p>Info</p> <p>By default, the application Znuny uses Rsyslog to manage its logging. However, with this method, the amount of logging is often low or non-existent. The variable <code>ZNUNY_LOG_PATH</code> allows you to dispense with Rsyslog for log management.  The application will simply write to a single log file, whose path can be customized.</p> <p>The Znuny application does not write all its activity in its log files. Only actions performed via the application's command line are logged. Daemon and cron logs are output directly in the standard json container output.</p>"},{"location":"docker-znuny/v6.5.8/deployment/#apache","title":"Apache","text":"<p>Example</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n    - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n      ZNUNY_APACHE_DOMAIN: znuny.domain.tld\n      ZNUNY_APACHE_REWRITE_RULES: |-\n        RewriteRule ^/$ http://%{HTTP_HOST}/otrs/customer.pl\n        RewriteRule ^/otrs/$ http://%{HTTP_HOST}/otrs/customer.pl\n        RewriteRule ^/otrs$ http://%{HTTP_HOST}/otrs/customer.pl\n</code></pre> <p>Info</p> <p>If required, you can set up a web domain for the virtualhost of the Apache2 server. This can be especially useful if you want to have a record of it in the server logs. If no domain is specified, then the Apache2 server will be configured with a \"default\"  value for the virtualhost's ServerNmae option.</p> <p>If required, you can also configure request rewriting rules directly in the virtualhost configuration.</p>"},{"location":"docker-znuny/v6.5.8/deployment/#local-user","title":"Local user","text":"<p>Example</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n    - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n      ZNUNY_USER_ADMIN_NAME: root@localhost\n      ZNUNY_USER_ADMIN_PASSWORD: password\n</code></pre> <p>Info</p> <p>Local administrator user configuration only works if LDAP agent configurations are not specified. If agent LDAP configurations are defined, those of the local administrator user become obsolete.</p>"},{"location":"docker-znuny/v6.5.8/deployment/#addons","title":"Addons","text":"<p>Example</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n    - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n      ZNUNY_ADDONS: https://download.znuny.org/releases/packages:Survey,https://addons.znuny.com/public:Znuny-HealthStatus\n</code></pre> <p>Info</p> <p>Extensions must be formatted with the repository as well as their name. The <code>ZNUNY_ADDONS</code> variable supports a comma-separated list.  </p> <p>The example above supports the following extensions :  </p> <ul> <li>https://download.znuny.org/releases/packages:Survey</li> <li>https://addons.znuny.com/public:Znuny-HealthStatus</li> </ul>"},{"location":"docker-znuny/v6.5.8/deployment/#authentications","title":"Authentications","text":"<p>Example</p> docker-compose.yaml<pre><code>---\nversion: \"3\"\n\nservices:\n  app:\n    image: ghcr.io/fr-bez-aosc/znuny:beta-6.5.8\n    container_name: znuny\n    ports:\n    - 8080:80\n    environment:\n      ZNUNY_DATABASE_HOST: db\n      ZNUNY_DATABASE_PORT: 5432\n      ZNUNY_DATABASE_NAME: znuny\n      ZNUNY_DATABASE_USER: znuny\n      ZNUNY_DATABASE_PASSWORD: password\n      ZNUNY_AUTHENTICATIONS_BACKENDS: |-\n        $Self-&gt;{CustomerUser1} = {\n          Name =&gt; 'LDAP Data Source',\n          Module =&gt; 'Kernel::System::CustomerUser::LDAP',\n          Params =&gt; {\n            Host =&gt; 'ldaps://openldap.default.svc.cluster.local',\n            BaseDN =&gt; 'o=client,ou=People,dc=domain,dc=tld',\n            SSCOPE =&gt; 'sub',\n            UserDN =&gt; 'cn=znuny,ou=applications,dc=domain,dc=tld',\n              UserPw =&gt; 'password',\n              DestCharset =&gt; 'utf-8',\n              SourceCharset =&gt; 'utf-8',\n              AlwaysFilter =&gt; '',\n              Params =&gt; {\n                  port =&gt; 686,\n                  timeout =&gt; 120,\n                  async =&gt; 0,\n                  version =&gt; 3,\n              },\n        },\n        (...)\n</code></pre>"},{"location":"docker-znuny/v6.5.8/environment/","title":"Environment","text":"<p>All the functions provided by the docker image are fully configurable when the container is created, using environment variables.</p> <p>Environment variables availables:</p> Name Description Default <code>ZNUNY_TIMEZONE</code> The service timezone. Etc/UTC <code>ZNUNY_LOG_PATH</code> The log file path. None <code>ZNUNY_SECURE_MODE</code> Enable or not the secure mode. 1 <code>ZNUNY_DATABASE_HOST</code> The database host. localhost <code>ZNUNY_DATABASE_PORT</code> The database port. 5432 <code>ZNUNY_DATABASE_NAME</code> The database name. znuny <code>ZNUNY_DATABASE_USER</code> The database user. znuny <code>ZNUNY_DATABASE_PASSWORD</code> The database password. password <code>ZNUNY_USER_ADMIN_NAME</code> The admin user name. root@localhost <code>ZNUNY_USER_ADMIN_PASSWORD</code> The admin user password. password <code>ZNUNY_MAILING_TYPE</code> The mailing type. sendmail <code>ZNUNY_MAILING_HOST</code> The mailing host. None <code>ZNUNY_MAILING_PORT</code> The mailing port. None <code>ZNUNY_MAILING_USER</code> The mailing user. None <code>ZNUNY_MAILING_PASSWORD</code> The mailing password. None <code>ZNUNY_APACHE_DOMAIN</code> The application domain. default <code>ZNUNY_APACHE_REWRITE_RULES</code> A custom rewrite rule. None <code>ZNUNY_AUTHENTICATIONS_BACKENDS</code> Users authentication settings. None <code>ZNUNY_ADDONS</code> List of application extensions to add. None <code>ZNUNY_CONFIGURATIONS_OVERRIDES_DIRECTORY</code> Directory path of custom configurations overrides. /overrides <code>ZNUNY_HEALTHSTATUS_APIKEY</code> Api key to use with the plugin healthstatus. Need to be defined if the plugin is installed. None <code>ZNUNY_SETTINGS_FILE</code> Full content of the configuration file. if defined, all other environment variable becomes useless. None"},{"location":"helm-charts/v0.1.6/installation/","title":"Installation","text":"<p>Warning</p> <p>We assume that a database is available to Znuny. Helm charts do not manage the deployment of this one.</p> <p>Add the Helm charts repository :</p> <pre><code>helm repo add aosc https://helm-charts.aosc-portal.com\n</code></pre> <p>Install the Helm release :</p> <pre><code>helm install znuny aosc/znuny \\\n  --version 0.1.6 \\\n  --set config.database.host=postgresql.demo.svc.cluster.local \\\n  --set config.database.port=5432 \\\n  --set config.database.name=znuny \\\n  --set config.database.username=znuny \\\n  --set config.database.password=password\n</code></pre>"},{"location":"helm-charts/v0.1.6/migration/","title":"Migration","text":""},{"location":"helm-charts/v0.1.6/migration/#migrate-an-existing-instance-on-a-new-one","title":"Migrate an existing instance on a new one","text":"<p>Create the job manifest file \"./job.migration.yaml\" using the following as an example :</p> <pre><code>---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: znuny-migration-db2db\nspec:\n  template:\n    spec:\n      containers:\n        - name: zcli\n          image: ghcr.io/fr-bez-aosc/znuny:&lt;tag&gt;\n          envFrom:\n          - configMapRef:\n              name: znuny-config\n          - secretRef:\n              name: znuny-secrets\n          command:\n            - \"/usr/bin/zcli\"\n            - \"job\"\n            - \"migration\"\n            - \"database\"\n            - \"-h\"\n            - \"&lt;postgresql host&gt;\"                                     # The kubernetes domain of the remote database\n            - \"-p\"\n            - \"&lt;postgresql port&gt;\"                                     # The port exposed by the kubernetes service\n            - \"-n\"\n            - \"&lt;postgresql database&gt;\"                                 # The name of the remote database\n            - \"-u\"\n            - \"&lt;postgresql user&gt;\"                                     # The user used for the remote connection\n            - \"-w\"\n            - \"&lt;postgresql password&gt;\"                                 # The user's password used for the remote connection\n      restartPolicy: Never\n</code></pre> <p>Make sure the image used is the same version as the target deployment.</p> <p>Stop the new instance :</p> <pre><code>kubectl scale deployment &lt;deployment name&gt; --replicas=0\n</code></pre> <p>Migrate migrate the database :</p> <pre><code>kubectl create \\\n  -f ./tests/job.migration.yaml\n</code></pre> <p>Restart the new instance :</p> <pre><code>kubectl scale deployment &lt;deployment name&gt; --replicas=1\n</code></pre> <p>If desired, delete the migration job to clean pods :</p> <pre><code>kubectl delete \\\n  -f ./tests/job.migration.yaml\n</code></pre>"},{"location":"helm-charts/v0.1.6/parameters/","title":"znuny","text":"<p>A Helm chart to deploy Znuny on Kubernetes</p> <p> </p>"},{"location":"helm-charts/v0.1.6/parameters/#values","title":"Values","text":""},{"location":"helm-charts/v0.1.6/parameters/#znunys-configuration","title":"Znuny's configuration","text":"Key Type Default Description config.addons.enabled bool <code>false</code> Enable application extensions. config.addons.packages list <code>[]</code> Define packages with the format used by Znuny (e.g. 'MyRepository:Package'). config.apache.domain string <code>nil</code> Set a local domain in Apache2 configurations. config.apache.rewriteRules object <code>{\"externalConfigMap\":{},\"rules\":null}</code> Set rewrite rules in Apache2 configurations. config.apache.rewriteRules.externalConfigMap object <code>{}</code> Define the name of a Kubernetes configMap to set the Apache2 rewrite rules.   If externalConfigMap is defined, the key \"rules\" will be ignored. config.apache.rewriteRules.rules string <code>nil</code> Set the rewrite rules to be included. config.api.healthstatus.apiKey string <code>nil</code> Set an API key to add at the global configuration.   Ignored if \"externalSecret\" is defined. config.api.healthstatus.externalSecret object <code>{}</code> Define the name of a Kubernetes secret to set an API key to add at the global configuration.   If \"externalSecret\" is defined, \"apiKey\" will be ignored. config.authentications.backends string <code>nil</code> Set the authentications backends configurations as following in a single block. config.authentications.externalSecret object <code>{}</code> Define the name of a Kubernetes secret to set the application authentication backends.   If \"externalSecret\" is defined, the key \"backends\" will be ignored. config.configurationOverridesDirectory string <code>\"/overrides/\"</code> Set the directory containing configuration overrides.   (e.g /overrides/Kernel/Language/en.pm becomes /opt/otrs/Custom/Kernel/Language/en.pm).   The directory path must end with '/''. Once the container has been initialized, all the configurations contained in this directory will be copied to the /opt/otrs/Custom directory. config.logs.path string <code>\"/var/log/znuny\"</code> Set a path to Znuny's file logging.   The file logging is enabled only if the key \"path\" is set. config.mails.sendmail.enabled bool <code>true</code> Enable the Sendmail module. config.mails.smtp.enabled bool <code>false</code> Enable the SMTP connection. config.mails.smtp.externalSecret object <code>{}</code> Define the name of a Kubernetes secret to set the SMTP server credentials.   If externalSecret is defined, keys \"username\" and \"password\" will be ignored. config.mails.smtp.host string <code>nil</code> Set the host of the SMTP server. config.mails.smtp.password string <code>nil</code> Set the SMTP server password to connect to.   Ignored if an externalSecret is defined. config.mails.smtp.port int <code>25</code> Set the port of the SMTP server. config.mails.smtp.username string <code>nil</code> Set the SMTP server username to connect to.   Ignored if an externalSecret is defined. config.secureMode bool <code>true</code> Set Znuny's SysConfig secure mode. config.timezone string <code>\"Etc/UTC\"</code> Set the container timezone. config.users.admin object <code>{\"externalSecret\":{},\"password\":null,\"username\":\"root@localhost\"}</code> Setting of the administrator user. config.users.admin.externalSecret object <code>{}</code> Define the name of a Kubernetes secret to set the administrator credentials.   If externalSecret is defined, keys \"username\" and \"password\" will be ignored. config.users.admin.password string <code>nil</code> Set the administrator's password.   Ignored if an externalSecret is defined. config.users.admin.username string <code>\"root@localhost\"</code> Set the administrator's username.   Ignored if an externalSecret is defined."},{"location":"helm-charts/v0.1.6/parameters/#required-configurations","title":"Required configurations","text":"Key Type Default Description config.database object <code>{\"externalSecret\":{},\"host\":null,\"name\":\"znuny\",\"password\":null,\"port\":5432,\"username\":null}</code> Set the connection of the PostgreSQL database. config.database.externalSecret object <code>{}</code> Define the name of a Kubernetes secret to set the database credentials.   If externalSecret is defined, keys \"username\" and \"password\" will be ignored. config.database.host string <code>nil</code> Set the host of the database. config.database.name string <code>\"znuny\"</code> Set the name of the database. config.database.password string <code>nil</code> Set the database password to connect to.   Ignored if an externalSecret is defined. config.database.port int <code>5432</code> Set the port of the database. config.database.username string <code>nil</code> Set the database username to connect to.   Ignored if an externalSecret is defined."},{"location":"helm-charts/v0.1.6/parameters/#extra","title":"Extra","text":"Key Type Default Description extraConfigMaps list <code>[]</code> Set extras Kubernetes configMaps. extraConfigmapMounts list <code>[]</code> Set extras Kubernetes configMaps mounts."},{"location":"helm-charts/v0.1.6/parameters/#other-values","title":"Other Values","text":"Key Type Default Description config object <code>{\"addons\":{\"enabled\":false,\"packages\":[]},\"apache\":{\"domain\":null,\"rewriteRules\":{\"externalConfigMap\":{},\"rules\":null}},\"api\":{\"healthstatus\":{\"apiKey\":null,\"externalSecret\":{}}},\"authentications\":{\"backends\":null,\"externalSecret\":{}},\"configurationOverridesDirectory\":\"/overrides/\",\"database\":{\"externalSecret\":{},\"host\":null,\"name\":\"znuny\",\"password\":null,\"port\":5432,\"username\":null},\"logs\":{\"path\":\"/var/log/znuny\"},\"mails\":{\"sendmail\":{\"enabled\":true},\"smtp\":{\"enabled\":false,\"externalSecret\":{},\"host\":null,\"password\":null,\"port\":25,\"username\":null}},\"secureMode\":true,\"timezone\":\"Etc/UTC\",\"users\":{\"admin\":{\"externalSecret\":{},\"password\":null,\"username\":\"root@localhost\"}}}</code> Set Znuny's configurations. config.addons object <code>{\"enabled\":false,\"packages\":[]}</code> Set application extensions if enabled. config.apache object <code>{\"domain\":null,\"rewriteRules\":{\"externalConfigMap\":{},\"rules\":null}}</code> Set Apache2 custom configurations. config.api object <code>{\"healthstatus\":{\"apiKey\":null,\"externalSecret\":{}}}</code> Set Znuny's API. config.api.healthstatus object <code>{\"apiKey\":null,\"externalSecret\":{}}</code> Set the healthstatus API.   The package healthstatus must be installed. config.authentications object <code>{\"backends\":null,\"externalSecret\":{}}</code> Set the application authentication backends. config.logs object <code>{\"path\":\"/var/log/znuny\"}</code> Set the application logging. config.mails object <code>{\"sendmail\":{\"enabled\":true},\"smtp\":{\"enabled\":false,\"externalSecret\":{},\"host\":null,\"password\":null,\"port\":25,\"username\":null}}</code> Set the application e-mail notifications system.   There are two mailing type :     - sendmail: Send mail with the local sendmail module.     - smtp: Connect to an external SMTP server to send mails.   Both features can't be activated simultaneously.   The feature \"sendmail\" will be prioritized over \"smtp\" as long as its \"enabled\" key is set to true. config.mails.sendmail object <code>{\"enabled\":true}</code> Setting of the local Sendmail module. config.mails.smtp object <code>{\"enabled\":false,\"externalSecret\":{},\"host\":null,\"password\":null,\"port\":25,\"username\":null}</code> Setting of the SMTP connection. config.users object <code>{\"admin\":{\"externalSecret\":{},\"password\":null,\"username\":\"root@localhost\"}}</code> Set Znuny's local users. image object <code>{\"externalPullSecrets\":[],\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"repository\":\"ghcr.io/fr-bez-aosc/znuny\",\"tag\":\"6.5.8-0\"}</code> Set the container image specifications. image.externalPullSecrets list <code>[]</code> Set an external registry pull secret if a custom image hosted on a private registry is used.   Use it only if an external pullSecret exists. Otherwise, use the pullSecrets key.   Both keys can be used simultaneously. image.pullPolicy string <code>\"IfNotPresent\"</code> Set the image pull policy. image.pullSecrets list <code>[]</code> Set a registry pull secret if a custom image hosted on a private registry is used.   Use it only if a pullSecret has to be created. Otherwise, use the externalPullSecrets key.   Both keys can be used simultaneously and the secret must be encoded in base64. image.repository string <code>\"ghcr.io/fr-bez-aosc/znuny\"</code> Set the container image to use. image.tag string <code>\"6.5.8-0\"</code> Set the image tag to use. ingress object <code>{\"annotations\":{},\"domains\":[],\"enabled\":false,\"tls\":{\"enabled\":false}}</code> Set the Kubernetes ingress specifications. ingress.annotations object <code>{}</code> Set annotations to add to the ingress. ingress.domains list <code>[]</code> Set public domains to expose to. ingress.enabled bool <code>false</code> Enable the ingress features. ingress.tls object <code>{\"enabled\":false}</code> Set TLS configurations. ingress.tls.enabled bool <code>false</code> Enable TLS support. nameOverride string <code>nil</code> Set a name to override the release name to deploy to. namespaceOverride string <code>nil</code> Set a name to override the namespace name to deploy to. persistentVolumeClaims list <code>[]</code> Set persistant volumes.   The access mode depend to your CSI. pod object <code>{\"annotations\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80,\"targetMemoryUtilizationPercentage\":75},\"deploymentStrategy\":\"Recreate\",\"labels\":{},\"replicaCount\":1,\"resources\":{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"4096Mi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"2048Mi\"}},\"restartPolicy\":\"Always\",\"securityContext\":{}}</code> Set Znuny's pod specifications. pod.annotations object <code>{}</code> Set annotations to add to Znuny's pod. pod.autoscaling object <code>{\"enabled\":false,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":80,\"targetMemoryUtilizationPercentage\":75}</code> Set the auto scaling of Znuny. pod.autoscaling.enabled bool <code>false</code> Enable the Horizontal pod scaling. pod.autoscaling.maxReplicas int <code>3</code> Set the miximum of replicas. pod.autoscaling.minReplicas int <code>1</code> Set the minimum of replicas. pod.autoscaling.targetCPUUtilizationPercentage int <code>80</code> Set the percentage of cpu to trigger the scaling. pod.autoscaling.targetMemoryUtilizationPercentage int <code>75</code> Set the percentage of memory to trigger the scaling. pod.deploymentStrategy string <code>\"Recreate\"</code> Set the deployment strategy. pod.labels object <code>{}</code> Set labels to add to Znuny's pod. pod.replicaCount int <code>1</code> Set replicas count. pod.resources object <code>{\"limits\":{\"cpu\":\"2000m\",\"memory\":\"4096Mi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"2048Mi\"}}</code> Set Znuny's container resources. pod.resources.limits object <code>{\"cpu\":\"2000m\",\"memory\":\"4096Mi\"}</code> Set Znuny's container limits. pod.resources.limits.cpu string <code>\"2000m\"</code> Set Znuny's container cpu limits. pod.resources.limits.memory string <code>\"4096Mi\"</code> Set Znuny's container memory limits. pod.resources.requests object <code>{\"cpu\":\"1000m\",\"memory\":\"2048Mi\"}</code> Set Znuny's container requests. pod.resources.requests.cpu string <code>\"1000m\"</code> Set Znuny's container cpu requests. pod.resources.requests.memory string <code>\"2048Mi\"</code> Set Znuny's container memory requests. pod.restartPolicy string <code>\"Always\"</code> Set the restart policy. pod.securityContext object <code>{}</code> Set Znuny's pod security contexts. service object <code>{\"port\":80,\"type\":\"ClusterIP\"}</code> Set the Kubernetes services specifications. service.port int <code>80</code> Set the service port. service.type string <code>\"ClusterIP\"</code> Set the service type. serviceAccount object <code>{\"annotations\":{},\"create\":false,\"name\":\"znuny\"}</code> Set a service account. serviceAccount.annotations object {} Set annotations to add to the service account. serviceAccount.create bool false Specifies whether a service account should be created. serviceAccount.name string \"znuny\" Set he name of the service account to use."},{"location":"helm-charts/v0.1.6/upgrade/","title":"Upgrade","text":""},{"location":"helm-charts/v0.1.6/upgrade/#upgrade-znuny-charts","title":"Upgrade Znuny charts","text":"<p>Znuny's application image has been designed to play database schema upgrade scripts. Each time the Znuny container is started, these scripts are played to ensure that Znuny and its database are on  the same version and up to date with the target version.</p> <p>The upgrade mechanism means that you must always be on the minor version just above the one previously installed. This means that if you're on version 6.3.x, you can only upgrade to version 6.4.x. A jump to version 6.5.x will not work.</p> <p>For further details, please refer to the official documentation</p> <p>To upgrade, simply update your Helm deployment.</p> <p>If the base image for higher-level Helm charts includes a new image version by default, then upgrading the Helm release to a higher chart version will suffice.</p> <pre><code>helm upgrade znuny aosc/znuny \\\n  --version 0.1.6 \\\n  --reuse-values\n</code></pre> <p>Otherwise, you'll need to specify the desired image version.</p> <pre><code>helm upgrade znuny aosc/znuny \\\n  --version 0.1.6 \\\n  --set image.tag=beta-6.5.8 \\\n  --reuse-values\n</code></pre>"},{"location":"helm-charts/v0.1.6/usage/","title":"Usage","text":""},{"location":"helm-charts/v0.1.6/usage/#configuration-overload","title":"Configuration overload","text":"<p>By default, the root directory of the Znuny application is /opt/otrs/. All application configurations are located in the /opt/otrs/Kernel/ directory. If you need to override a configuration file, a simple method is available. Simply copy the resources with the appropriate tree structure into the /opt/otrs/Custom directory. Based on this principle, the file /opt/otrs/Kernel/Langage/en.pm will be replaced by the file /opt/otrs/Custom/Kernel/Langage/en.pm.</p> <p>To overcome the limitations of permissions on Kubernetes mounts, an automatic copy system has been implemented. The <code>config.configurationOverridesDirectory</code> parameter, which by default contains the value /overrides/, is used to specify an overload directory in which all overload files should be stored. These files must be stored in the same tree structure as the /opt/otrs/Custom/ directory.</p> <p>In conclusion, a file mounted on the /overrides/Kernel/Language/en.pm path will be copied on container startup to the /opt/otrs/Custom/Kernel/Language/en.pm path, which will then overload the /opt/otrs/Kernel/Language/en.pm file on Znuny startup.</p> <p>To override a file, simply mount a secret or configmap on the desired path. The <code>extraConfigMaps</code> and <code>extraConfigmapMounts</code> configurations are provided for this purpose.</p> <p>Example</p> <pre><code>extraConfigMaps:\n  - name: config-en-pm\n    items:\n      - key: en.pm\n        data: |-\n          content\n          of\n          the\n          configmap\n\nextraConfigmapMounts:\n    - name: overrides-config-en-pm\n      mountPath: /overrides/Kernel/Language/en.pm\n      configMap: config-en-pm\n      subpath: en.pm\n</code></pre> <p>Tips</p> <p>A configmap or secret can be mounted from a resource external to the charts.</p>"},{"location":"overviews/docker-znuny/","title":"Docker Znuny","text":"<p>The development of this container image for the Znuny application revolves around the use of a command-line tool.</p> <p>This command-line tool is called <code>zcli</code> and is a bash script developed with the bash framework named Bashly.</p> <p>The script <code>zcli</code> embeds all the tools required to manage the various functionalities supported.</p> <p>The entry point to the docker image is this single script.  </p>"},{"location":"overviews/helm-charts/","title":"Helm Charts","text":""},{"location":"overviews/helm-charts/#design","title":"Design","text":"<p>The Helm charters available are developed with the aim of providing a quick and easy way to deploy a production-ready instance of the Znuny application using the docker-znuny container image.</p>"},{"location":"overviews/helm-charts/#features","title":"Features","text":"<p>They currently only manage the deployment of the Znuny application, as well as the Kubernetes ecosystem required for a high-performance, robust production environment.</p> <p>Helm charters manage the following resources:</p> <ul> <li>ServiceAccount</li> <li>ConfigMaps</li> <li>Secrets</li> <li>PersistentVolumeClaims</li> <li>Deployment</li> <li>HorizontalPodScaling</li> <li>Service</li> <li>Ingress</li> </ul>"}]}