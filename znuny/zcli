#!/usr/bin/env bash
# This script was generated by bashly 1.0.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
zcli_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli - Simple cli to manage the container of znuny\n"
    echo

  else
    printf "zcli - Simple cli to manage the container of znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli COMMAND\n"
  printf "  zcli [COMMAND] --help | -h\n"
  printf "  zcli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Manage the configuration of znuny\n" "config  "
  printf "  %s   Check some features or resources\n" "check   "
  printf "  %s   Download the znuny archive\n" "download"
  printf "  %s   Initialize the container\n" "init    "
  printf "  %s   Run Znuny\n" "run     "
  printf "  %s   Manage users\n" "user    "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_TYPE"
    printf "    The database type (mysql, pgsql)\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_HOST"
    printf "    The database host\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_NAME"
    printf "    The database name\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_USER"
    printf "    The database user\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_PASSWORD"
    printf "    The database password\n"
    echo

  fi
}

# :command.usage
zcli_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config - Manage the configuration of znuny\n"
    echo

  else
    printf "zcli config - Manage the configuration of znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config COMMAND\n"
  printf "  zcli config [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create virtualhosts\n" "apache"
  printf "  %s   Create all crons\n" "cron  "
  printf "  %s   Create the main configuration file of Znuny\n" "znuny "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_apache_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config apache - Create virtualhosts\n"
    echo

  else
    printf "zcli config apache - Create virtualhosts\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config apache\n"
  printf "  zcli config apache --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_cron_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config cron - Create all crons\n"
    echo

  else
    printf "zcli config cron - Create all crons\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config cron\n"
  printf "  zcli config cron --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_znuny_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config znuny - Create the main configuration file of Znuny\n"
    echo

  else
    printf "zcli config znuny - Create the main configuration file of Znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config znuny\n"
  printf "  zcli config znuny --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli check - Check some features or resources\n"
    echo

  else
    printf "zcli check - Check some features or resources\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli check COMMAND\n"
  printf "  zcli check [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Check Perl modules\n" "modules"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_check_modules_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli check modules - Check Perl modules\n"
    echo

  else
    printf "zcli check modules - Check Perl modules\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli check modules\n"
  printf "  zcli check modules --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_download_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli download - Download the znuny archive\n"
    echo

  else
    printf "zcli download - Download the znuny archive\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli download\n"
  printf "  zcli download --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli init - Initialize the container\n"
    echo

  else
    printf "zcli init - Initialize the container\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli init\n"
  printf "  zcli init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli run - Run Znuny\n"
    echo

  else
    printf "zcli run - Run Znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli run\n"
  printf "  zcli run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli user - Manage users\n"
    echo

  else
    printf "zcli user - Manage users\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli user COMMAND\n"
  printf "  zcli user [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Add users\n" "add"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_user_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli user add - Add users\n"
    echo

  else
    printf "zcli user add - Add users\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli user add\n"
  printf "  zcli user add --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/config.sh
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

config_get() {
  local key=$1
  local regex="^$key *= *(.+)$"
  local value=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done <"$CONFIG_FILE"

  echo "$value"
}

config_set() {
  local key=$1
  shift
  local value="$*"

  config_init

  local regex="^($key) *= *.+$"
  local output=""
  local found_key=""
  local newline

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done <"$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  printf "%b\n" "$output" >"$CONFIG_FILE"
}

config_del() {
  local key=$1

  local regex="^($key) *="
  local output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done <"$CONFIG_FILE"

  printf "%b\n" "$output" >"$CONFIG_FILE"
}

config_show() {
  config_init
  cat "$CONFIG_FILE"
}

config_keys() {
  local regex="^([a-zA-Z0-9_\-\/\.]+) *="

  config_init

  local keys=()
  local key

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      key="${BASH_REMATCH[1]}"
      keys+=("$key")
    fi
  done <"$CONFIG_FILE"
  echo "${keys[@]}"
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

# src/lib/env.sh
# [ -z ${ZNUNY_DB_HOST} ] && export ZNUNY_DB_HOST="znuny-db"

function set_env() {
  if [[ -z ${ZNUNY_DATABASE_HOST} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_HOST"
    exit 1
  fi

  if [[ -z ${ZNUNY_DATABASE_NAME} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_NAME"
    exit 1
  fi

  if [[ -z ${ZNUNY_DATABASE_USER} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_USER"
    exit 1
  fi

  if [[ -z ${ZNUNY_DATABASE_PASSWORD} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_PASSWORD"
    exit 1
  fi
}

# src/lib/logger.sh
function customLogger() {
  TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
  LEVEL=${1}
  SOURCE=${2}
  MESSAGE=${3}

  cat << EOF
{"timestamp": "${TIMESTAMP}","level": "${LEVEL}","source": "${SOURCE}","message": "${MESSAGE}"}
EOF
}

# src/lib/yaml.sh
yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

# src/lib/znuny.sh
CONFIG_PATH="/opt/otrs/Kernel/Config.pm"

function gen_add_licence() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
# --
# Copyright (C) 2001-2021 OTRS AG, https://otrs.com/
# Copyright (C) 2021 Znuny GmbH, https://znuny.org/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --
#  Note:
#

#  -->> Most OTRS configuration should be done via the OTRS web interface
#       and the SysConfig. Only for some configuration, such as database
#       credentials and customer data source changes, you should edit this
#       file. For changes do customer data sources you can copy the definitions
#       from Kernel/Config/Defaults.pm and paste them in this file.
#       Config.pm will not be overwritten when updating OTRS.
# --

EOF
)
}

function gen_add_package() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
package Kernel::Config;

EOF
)
}

function gen_add_use() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
use strict;
use warnings;
use utf8;

EOF
)
}

function gen_add_sub() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
sub Load {
    my \$Self = shift;

EOF
)
}

function gen_add_database_credentials() {
  HOST=${1}
  NAME=${2}
  USER=${3}

  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # ---------------------------------------------------- #
    # database settings                                    #
    # ---------------------------------------------------- #

    # The database host
    \$Self->{DatabaseHost} = '${HOST}';

    # The database name
    \$Self->{Database} = '${NAME}';

    # The database user
    \$Self->{DatabaseUser} = '${USER}';

    return 1;
}
use parent qw(Kernel::Config::Defaults);
1;
EOF
)

  PASSWORD=$(su -c "/opt/otrs/bin/otrs.Console.pl Maint::Database::PasswordCrypt --password=${4}" -s /bin/bash otrs | awk -F '[{}]' '{print $2}' | tail -n1)
  sed -i -e :a -e '$d;N;2,4ba' -e 'P;D' ${CONFIG_PATH}

  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # The password of database user. You also can use bin/otrs.Console.pl Maint::Database::PasswordCrypt
    # for crypted passwords
    \$Self->{DatabasePw} = '${PASSWORD}';

EOF
)
}

function gen_add_database_mysql() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
     # The database DSN for MySQL ==> more: "perldoc DBD::mysql"
     \$Self->{DatabaseDSN} = "DBI:mysql:database=$Self->{Database};host=$Self->{DatabaseHost};";

EOF
)
}

function gen_add_database_postgresql() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # The database DSN for PostgreSQL ==> more: "perldoc DBD::Pg"
    # if you want to use a TCP/IP connection
    \$Self->{DatabaseDSN} = "DBI:Pg:dbname=$Self->{Database};host=$Self->{DatabaseHost};";

EOF
)
}

function gen_add_database_microsoftsql() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # The database DSN for Microsoft SQL Server - only supported if OTRS is
    # installed on Windows as well
    \$Self->{DatabaseDSN} = "DBI:ODBC:driver={SQL Server};Database=$Self->{Database};Server=$Self->{DatabaseHost},1433";

EOF
)
}

function gen_add_database_oracle() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # The database DSN for Oracle ==> more: "perldoc DBD::oracle"
    \$Self->{DatabaseDSN} = "DBI:Oracle://$Self->{DatabaseHost}:1521/$Self->{Database}";

EOF
)
}

# #
# #    $ENV{ORACLE_HOME}     = '/path/to/your/oracle';
# #    $ENV{NLS_DATE_FORMAT} = 'YYYY-MM-DD HH24:MI:SS';
# #    $ENV{NLS_LANG}        = 'AMERICAN_AMERICA.AL32UTF8';

function gen_add_fs_root_dir() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # ---------------------------------------------------- #
    # fs root directory
    # ---------------------------------------------------- #
    \$Self->{Home} = '/opt/otrs';

EOF
)
}

#     # ---------------------------------------------------- #
#     # insert your own config settings "here"               #
#     # config settings taken from Kernel/Config/Defaults.pm #
#     # ---------------------------------------------------- #
#     # $Self->{SessionUseCookie} = 0;
#     # $Self->{CheckMXRecord} = 0;
#
#     # ---------------------------------------------------- #
#     # data inserted by installer                           #
#     # ---------------------------------------------------- #
#     # $DIBI$

function gen_add_return() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    return 1;
}

EOF
)
}

function gen_add_system_stuff() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
# # ---------------------------------------------------- #
# # needed system stuff (don't edit this)                #
# # ---------------------------------------------------- #
use Kernel::Config::Defaults; # import Translatable()
use parent qw(Kernel::Config::Defaults);

EOF
)
}

function gen_add_end() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}

# -----------------------------------------------------#

1;

EOF
)
}

# :command.command_functions

# :command.function
zcli_config_apache_command() {
  # src/config_apache_command.sh
  customLogger "info" "config_apache" "Create the virtualhost to expose Znuny"
  ln -s /opt/otrs/scripts/apache2-httpd.include.conf /etc/apache2/conf-available/zzz_znuny.conf

  customLogger "info" "config_apache" "Disable useless Apache modules"
  a2dismod mpm_event

  customLogger "info" "config_apache" "Enable required Apache modules"
  a2enmod perl headers deflate filter cgi mpm_prefork

  customLogger "info" "config_apache" "Enable the virtualhost to expose Znuny"
  a2enconf zzz_znuny

}

# :command.function
zcli_config_cron_command() {
  # src/config_cron_command.sh
  CRONS_PATH="/opt/otrs/var/cron"

  customLogger "info" "config_cron" "Create crons"
  for CRON in $(${CRONS_PATH}/*.dist); do
    cp ${CRON} $(basename $foo .dist)
  done

}

# :command.function
zcli_config_znuny_command() {
  # src/config_znuny_command.sh
  CONFIG_PATH="/opt/otrs/Kernel/Config.pm"

  set_env

  customLogger "info" "config_znuny" "Check if the config file already exists"
  if [[ -f "${CONFIG_PATH}" ]]; then
    customLogger "warn" "config_znuny" "The configuration file of Znuny already exists and will be replaced"
    rm ${CONFIG_PATH}
  fi

  customLogger "info" "config_znuny" "Create the configuration of Znuny"
  touch ${CONFIG_PATH}

  customLogger "info" "config_znuny" "Generate the licence"
  gen_add_licence

  customLogger "info" "config_znuny" "Generate packages"
  gen_add_package

  customLogger "info" "config_znuny" "Generate uses"
  gen_add_use

  customLogger "info" "config_znuny" "Generate sub"
  gen_add_sub

  customLogger "info" "config_znuny" "Generate database connection"
  gen_add_database_credentials "${ZNUNY_DATABASE_HOST}" "${ZNUNY_DATABASE_NAME}" "${ZNUNY_DATABASE_USER}" "${ZNUNY_DATABASE_PASSWORD}"

  customLogger "info" "config_znuny" "Generate the database driver"
  case ${ZNUNY_DATABASE_TYPE} in
    "mysql")
      gen_add_database_mysql
      ;;
    "pgsql")
      gen_add_database_postgresql
      ;;
    "mssql")
      gen_add_database_microsoftsql
      ;;
    "oracle")
      gen_add_database_oracle
      ;;
  esac

  customLogger "info" "config_znuny" "Generate the filesystem root directory"
  gen_add_fs_root_dir

  customLogger "info" "config_znuny" "Generate the configuration return"
  gen_add_return

  customLogger "info" "config_znuny" "Generate the system stuffs"
  gen_add_system_stuff

  customLogger "info" "config_znuny" "End file"
  gen_add_end

}

# :command.function
zcli_check_modules_command() {
  # src/check_modules_command.sh
  customLogger "info" "check_modules" "Check Perl modules"
  /opt/otrs/bin/otrs.CheckModules.pl --all > /dev/null 2>&1

}

# :command.function
zcli_download_command() {
  # src/download_command.sh
  DESTINATION="/tmp/znuny-${CONFIG_ZNUNY_VERSION}.tar.gz"

  customLogger "info" "download" "Download the version ${CONFIG_ZNUNY_VERSION} of the archive of Znuny"
  curl -sS \
    -o ${DESTINATION} \
    https://download.znuny.org/releases/znuny-${CONFIG_ZNUNY_VERSION}.tar.gz

  customLogger "info" "download" "Check the archive integrity"
  if [ ! $(md5sum ${DESTINATION} | awk '{print $1}') == "${CONFIG_ZNUNY_CHECKSUM}" ]; then
      customLogger "error" "The archive of the version ${CONFIG_ZNUNY_VERSION} of Znuny failed to pass the sum check with the hash ${CONFIG_ZNUNY_CHECKSUM}"
      exit 1
  fi

  customLogger "info" "download" "Extract the source code"
  tar -xzf ${DESTINATION} -C /opt/otrs --strip-components=1

  customLogger "info" "download" "Delete the archive of Znuny"
  rm -f ${DESTINATION}

}

# :command.function
zcli_init_command() {
  # src/init_command.sh
  zcli download

  zcli config znuny

  zcli config cron

  zcli config apache

  zcli user add

  zcli check modules

  # sleep 1000000
  zcli run

}

# :command.function
zcli_run_command() {
  # src/run_command.sh
  customLogger "info" "run" "Launch the main cron of Znuny"
  su -c "/opt/otrs/bin/Cron.sh start" -s /bin/bash otrs

  sleep 1

  customLogger "info" "run" "Launch the web server"
  /usr/sbin/apache2ctl -D FOREGROUND

}

# :command.function
zcli_user_add_command() {
  # src/user_add_command.sh
  APP_USER="otrs"

  customLogger "info" "user" "Create the application user '${APP_USER}'"
  useradd -d /opt/otrs -c 'Znuny user' -g www-data -s /bin/bash -M -N ${APP_USER}

  customLogger "info" "user" "Set the permission for the user onto the applications directories"
  /opt/otrs/bin/otrs.SetPermissions.pl >/dev/null 2>&1

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        zcli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    config)
      action="config"
      shift
      zcli_config_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      zcli_check_parse_requirements "$@"
      shift $#
      ;;

    download)
      action="download"
      shift
      zcli_download_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      zcli_init_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      zcli_run_parse_requirements "$@"
      shift $#
      ;;

    user)
      action="user"
      shift
      zcli_user_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    apache)
      action="apache"
      shift
      zcli_config_apache_parse_requirements "$@"
      shift $#
      ;;

    cron)
      action="cron"
      shift
      zcli_config_cron_parse_requirements "$@"
      shift $#
      ;;

    znuny)
      action="znuny"
      shift
      zcli_config_znuny_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_config_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_apache_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_apache_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config apache"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_cron_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_cron_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config cron"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_znuny_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_znuny_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config znuny"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    modules)
      action="modules"
      shift
      zcli_check_modules_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_check_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_check_modules_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_check_modules_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check modules"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_download_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_download_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="download"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    add)
      action="add"
      shift
      zcli_user_add_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_user_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_user_add_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_user_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="user add"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  # src/initialize.sh
  CONFIG_FILE="/etc/zcli/zcli.ini"

  CONFIG_ZNUNY_VERSION=$(config_get "CONFIG_ZNUNY_VERSION")
  CONFIG_ZNUNY_CHECKSUM=$(config_get "CONFIG_ZNUNY_CHECKSUM")

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "config") zcli_config_command ;;
    "config apache") zcli_config_apache_command ;;
    "config cron") zcli_config_cron_command ;;
    "config znuny") zcli_config_znuny_command ;;
    "check") zcli_check_command ;;
    "check modules") zcli_check_modules_command ;;
    "download") zcli_download_command ;;
    "init") zcli_init_command ;;
    "run") zcli_run_command ;;
    "user") zcli_user_command ;;
    "user add") zcli_user_add_command ;;
  esac
}

initialize
run "$@"
