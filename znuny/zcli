#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
zcli_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli - Simple cli to manage the container of znuny\n"
    echo

  else
    printf "zcli - Simple cli to manage the container of znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli COMMAND\n"
  printf "  zcli [COMMAND] --help | -h\n"
  printf "  zcli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Manage the configuration of znuny\n" "config   "
  printf "  %s   Check some features or resources\n" "check    "
  printf "  %s   Download the znuny archive\n" "download "
  printf "  %s   Initialize the container\n" "init     "
  printf "  %s   Migrate an existing database from any source to the application database\n" "migration"
  printf "  %s   Run Znuny\n" "run      "
  printf "  %s   Manage users\n" "user     "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_TYPE"
    printf "    The database type (mysql, pgsql)\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_HOST"
    printf "    The database host\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_NAME"
    printf "    The database name\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_USER"
    printf "    The database user\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_DATABASE_PASSWORD"
    printf "    The database password\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_USER_ADMIN_NAME"
    printf "    The admin user name\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_USER_ADMIN_PASSWORD"
    printf "    The admin user password\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_MAILING_TYPE"
    printf "    The mailing type\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_MAILING_HOST"
    printf "    The mailing host\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_MAILING_PORT"
    printf "    The mailing port\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_MAILING_USER"
    printf "    The mailing user\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_MAILING_PASSWORD"
    printf "    The mailing password\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_1"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_2"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_3"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_4"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_5"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_6"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_7"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_8"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_APACHE_REWRITE_RULE_9"
    printf "    A custom rewrite rule\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_1"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_2"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_3"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_4"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_5"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_6"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_7"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_8"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_BACKEND_9"
    printf "    Customers authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_1"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_2"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_3"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_4"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_5"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_6"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_7"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_8"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_CUSTOMER_SYNCHRO_9"
    printf "    Customers authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_1"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_2"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_3"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_4"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_5"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_6"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_7"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_8"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_BACKEND_9"
    printf "    Agents authentication backend\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_1"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_2"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_3"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_4"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_5"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_6"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_7"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_8"
    printf "    Agents authentication synchronization\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZNUNY_AGENTS_SYNCHRO_9"
    printf "    Agents authentication synchronization\n"
    echo

  fi
}

# :command.usage
zcli_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config - Manage the configuration of znuny\n"
    echo

  else
    printf "zcli config - Manage the configuration of znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config COMMAND\n"
  printf "  zcli config [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create virtualhosts\n" "apache   "
  printf "  %s   Create all crons\n" "crons    "
  printf "  %s   Create customers authentications\n" "customers"
  printf "  %s   Initialize the database\n" "database "
  printf "  %s   Create operators authentications\n" "operators"
  printf "  %s   Create the main configuration file of Znuny\n" "znuny    "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_apache_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config apache - Create virtualhosts\n"
    echo

  else
    printf "zcli config apache - Create virtualhosts\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config apache\n"
  printf "  zcli config apache --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_crons_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config crons - Create all crons\n"
    echo

  else
    printf "zcli config crons - Create all crons\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config crons\n"
  printf "  zcli config crons --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_customers_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config customers - Create customers authentications\n"
    echo

  else
    printf "zcli config customers - Create customers authentications\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config customers\n"
  printf "  zcli config customers --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_database_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config database - Initialize the database\n"
    echo

  else
    printf "zcli config database - Initialize the database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config database\n"
  printf "  zcli config database --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_operators_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config operators - Create operators authentications\n"
    echo

  else
    printf "zcli config operators - Create operators authentications\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config operators\n"
  printf "  zcli config operators --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_config_znuny_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli config znuny - Create the main configuration file of Znuny\n"
    echo

  else
    printf "zcli config znuny - Create the main configuration file of Znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli config znuny\n"
  printf "  zcli config znuny --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli check - Check some features or resources\n"
    echo

  else
    printf "zcli check - Check some features or resources\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli check COMMAND\n"
  printf "  zcli check [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Check Perl modules\n" "modules"
  printf "  %s   Check the built configuration in database\n" "config "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_check_modules_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli check modules - Check Perl modules\n"
    echo

  else
    printf "zcli check modules - Check Perl modules\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli check modules\n"
  printf "  zcli check modules --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_check_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli check config - Check the built configuration in database\n"
    echo

  else
    printf "zcli check config - Check the built configuration in database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli check config\n"
  printf "  zcli check config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_download_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli download - Download the znuny archive\n"
    echo

  else
    printf "zcli download - Download the znuny archive\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli download\n"
  printf "  zcli download --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli init - Initialize the container\n"
    echo

  else
    printf "zcli init - Initialize the container\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli init\n"
  printf "  zcli init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_migration_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli migration - Migrate an existing database from any source to the application database\n"
    echo

  else
    printf "zcli migration - Migrate an existing database from any source to the application database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli migration COMMAND\n"
  printf "  zcli migration [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Migrate an existing database from a working server\n" "database"
  printf "  %s   Migrate an existing database from a dump file in an object storage\n" "s3      "
  printf "  %s   Migrate an existing database from a dump file on the local filesystem\n" "local   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_migration_database_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli migration database - Migrate an existing database from a working server\n"
    echo

  else
    printf "zcli migration database - Migrate an existing database from a working server\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli migration database TYPE [OPTIONS]\n"
  printf "  zcli migration database --help\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "-h HOST (required)"
    printf "    The database host\n"
    echo

    # :flag.usage
    printf "  %s\n" "-p PORT (required)"
    printf "    The database port\n"
    echo

    # :flag.usage
    printf "  %s\n" "-n NAME (required)"
    printf "    The database name\n"
    echo

    # :flag.usage
    printf "  %s\n" "-u USER (required)"
    printf "    The database user\n"
    echo

    # :flag.usage
    printf "  %s\n" "-w PASSWORD (required)"
    printf "    The database password\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TYPE"
    printf "    The database type\n"
    printf "    Allowed: pgsql, mysql\n"
    echo

  fi
}

# :command.usage
zcli_migration_s3_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli migration s3 - Migrate an existing database from a dump file in an object storage\n"
    echo

  else
    printf "zcli migration s3 - Migrate an existing database from a dump file in an object storage\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli migration s3 [OPTIONS]\n"
  printf "  zcli migration s3 --help\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "-b BUCKET (required)"
    printf "    The S3 bucket\n"
    echo

    # :flag.usage
    printf "  %s\n" "-h HOST (required)"
    printf "    The access host\n"
    echo

    # :flag.usage
    printf "  %s\n" "-i IDENTITY (required)"
    printf "    The access identity\n"
    echo

    # :flag.usage
    printf "  %s\n" "-o OBJECT (required)"
    printf "    The object path\n"
    echo

    # :flag.usage
    printf "  %s\n" "-t TOKEN (required)"
    printf "    The access token\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_migration_local_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli migration local - Migrate an existing database from a dump file on the local filesystem\n"
    echo

  else
    printf "zcli migration local - Migrate an existing database from a dump file on the local filesystem\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli migration local PATH\n"
  printf "  zcli migration local --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PATH"
    printf "    Path of the dump file\n"
    echo

  fi
}

# :command.usage
zcli_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli run - Run Znuny\n"
    echo

  else
    printf "zcli run - Run Znuny\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli run\n"
  printf "  zcli run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli user - Manage users\n"
    echo

  else
    printf "zcli user - Manage users\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli user COMMAND\n"
  printf "  zcli user [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create the admin user\n" "admin      "
  printf "  %s   Set the user permissions\n" "permissions"
  printf "  %s   Create the system user\n" "system     "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_user_admin_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli user admin - Create the admin user\n"
    echo

  else
    printf "zcli user admin - Create the admin user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli user admin\n"
  printf "  zcli user admin --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_user_permissions_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli user permissions - Set the user permissions\n"
    echo

  else
    printf "zcli user permissions - Set the user permissions\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli user permissions\n"
  printf "  zcli user permissions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
zcli_user_system_usage() {
  if [[ -n $long_usage ]]; then
    printf "zcli user system - Create the system user\n"
    echo

  else
    printf "zcli user system - Create the system user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  zcli user system\n"
  printf "  zcli user system --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/config.sh
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

config_get() {
  local key=$1
  local regex="^$key *= *(.+)$"
  local value=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done <"$CONFIG_FILE"

  echo "$value"
}

config_set() {
  local key=$1
  shift
  local value="$*"

  config_init

  local regex="^($key) *= *.+$"
  local output=""
  local found_key=""
  local newline

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done <"$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  printf "%b\n" "$output" >"$CONFIG_FILE"
}

config_del() {
  local key=$1

  local regex="^($key) *="
  local output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done <"$CONFIG_FILE"

  printf "%b\n" "$output" >"$CONFIG_FILE"
}

config_show() {
  config_init
  cat "$CONFIG_FILE"
}

config_keys() {
  local regex="^([a-zA-Z0-9_\-\/\.]+) *="

  config_init

  local keys=()
  local key

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      key="${BASH_REMATCH[1]}"
      keys+=("$key")
    fi
  done <"$CONFIG_FILE"
  echo "${keys[@]}"
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

# src/lib/database.sh
function database_check_mysql() {
  HOST=${1}
  PORT=${2}
  NAME=${3}
  USER=${4}
  PASSWORD=${5}

  RESULT=$(mysql -h${HOST} -P${PORT} -u${USER} -p${PASSWORD} ${NAME} \
    -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = '${NAME}';" 2>/dev/null | grep -Eo '[0-9]+')

  if [[ "${RESULT}" != "0" ]]; then
    return 0 # Database already initialize
  else
    return 1 # Database not initialize
  fi
}

function database_init_mysql() {
  HOST=${1}
  PORT=${2}
  NAME=${3}
  USER=${4}
  PASSWORD=${5}

  # echo -e "mysql -h${HOST} -u${USER} -p${PASSWORD} -D ${NAME}"

  mysql -h${HOST} -P${PORT} -u${USER} -p${PASSWORD} -D ${NAME} < /opt/otrs/scripts/database/schema.mysql.sql
  sleep 1
  mysql -h${HOST} -P${PORT} -u${USER} -p${PASSWORD} -D ${NAME} < /opt/otrs/scripts/database/initial_insert.mysql.sql
  sleep 1
  mysql -h${HOST} -P${PORT} -u${USER} -p${PASSWORD} -D ${NAME} < /opt/otrs/scripts/database/schema-post.mysql.sql
}

function database_check_pgsql() {
  HOST=${1}
  PORT=${2}
  NAME=${3}
  USER=${4}
  PASSWORD=${5}

  RESULT=$(psql -h ${HOST} -p${PORT} -U ${USER} -d ${NAME} \
    -c "SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE schemaname = '${NAME}';" 2>/dev/null | grep -eo '[0-9]+')

  if [[ "${RESULT}" != "0" ]]; then
    return 0 # Database already initialize
  else
    return 1 # Database not initialize
  fi
}

function database_init_pgsql() {
  HOST=${1}
  PORT=${2}
  NAME=${3}
  USER=${4}
  PGPASSWORD=${5}

  psql -h ${HOST} -p${PORT} -U ${USER} -d ${NAME} -f /opt/otrs/scripts/database/schema.postgresql.sql
  sleep 1
  psql -h ${HOST} -p${PORT} -U ${USER} -d ${NAME} -f /opt/otrs/scripts/database/initial_insert.postgresql.sql
  sleep 1
  psql -h ${HOST} -p${PORT} -U ${USER} -d ${NAME} -f /opt/otrs/scripts/database/schema-post.postgresql.sql

}

# src/lib/env.sh
function set_env_database() {
  if [[ -z ${ZNUNY_DATABASE_HOST} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_HOST"
    exit 1
  fi

  if [[ -z ${ZNUNY_DATABASE_NAME} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_NAME"
    exit 1
  fi

  if [[ -z ${ZNUNY_DATABASE_USER} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_USER"
    exit 1
  fi

  if [[ -z ${ZNUNY_DATABASE_PASSWORD} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_DATABASE_PASSWORD"
    exit 1
  fi
}

function set_env_znuny() {
  if [[ -z ${ZNUNY_USER_ADMIN_NAME} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_USER_ADMIN_NAME"
    exit 1
  fi

  if [[ -z ${ZNUNY_USER_ADMIN_PASSWORD} ]]; then
    customLogger "error" "env" "Failed to load the environment variable ZNUNY_USER_ADMIN_PASSWORD"
    exit 1
  fi
}

function set_env_mailing() {
  if [[ -z ${ZNUNY_MAILING_TYPE} ]]; then
    customLogger "warn" "env" "Failed to load the environment variable ZNUNY_MAILING_TYPE. It will be define to 'internal'"
    ZNUNY_MAILING_TYPE="internal"
  fi

  if [[ ${ZNUNY_MAILING_TYPE} == "external" ]]; then
    if [[ -z ${ZNUNY_MAILING_HOST} ]]; then
      customLogger "error" "env" "Failed to load the environment variable ZNUNY_MAILING_HOST"
      exit 1
    fi

    if [[ -z ${ZNUNY_MAILING_PORT} ]]; then
      customLogger "error" "env" "Failed to load the environment variable ZNUNY_MAILING_PORT "
      exit 1
    fi

    if [[ -z ${ZNUNY_MAILING_USER} ]]; then
      customLogger "error" "env" "Failed to load the environment variable ZNUNY_MAILING_USER "
      exit 1
    fi

    if [[ -z ${ZNUNY_MAILING_PASSWORD} ]]; then
      customLogger "error" "env" "Failed to load the environment variable ZNUNY_MAILING_PASSWORD"
      exit 1
    fi
  fi
}

# src/lib/logger.sh
 #  _____                _                 ______

 # |  __ \              | |               |___  /

 # | |  | |  ___    ___ | | __ ___  _ __     / /  _ __   _   _  _ __   _   _

 # | |  | | / _ \  / __|| |/ // _ \| '__|   / /  | '_ \ | | | || '_ \ | | | |
 # | |__| || (_) || (__ |   <|  __/| |     / /__ | | | || |_| || | | || |_| |
 # |_____/  \___/  \___||_|\_\\___||_|    /_____||_| |_| \__,_||_| |_| \__, |
 #                                                                      __/ |
 #                                                                     |___/

function customLogger() {
  TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
  LEVEL=${1}
  SOURCE=${2}
  MESSAGE=${3}

  cat << EOF
{"timestamp": "${TIMESTAMP}","level": "${LEVEL}","source": "${SOURCE}","message": "${MESSAGE}"}
EOF
}

# src/lib/yaml.sh
yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

# src/lib/znuny.sh
CONFIG_PATH="/opt/otrs/Kernel/Config.pm"

function gen_add_licence() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
# --
# Copyright (C) 2001-2021 OTRS AG, https://otrs.com/
# Copyright (C) 2021 Znuny GmbH, https://znuny.org/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --
#  Note:
#

#  -->> Most OTRS configuration should be done via the OTRS web interface
#       and the SysConfig. Only for some configuration, such as database
#       credentials and customer data source changes, you should edit this
#       file. For changes do customer data sources you can copy the definitions
#       from Kernel/Config/Defaults.pm and paste them in this file.
#       Config.pm will not be overwritten when updating OTRS.
# --

EOF
)
}

function gen_add_package() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
package Kernel::Config;

EOF
)
}

function gen_add_use() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
use strict;
use warnings;
use utf8;

EOF
)
}

function gen_add_sub() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
sub Load {
    my \$Self = shift;

EOF
)
}

function gen_add_database_credentials() {
  HOST=${1}
  NAME=${2}
  USER=${3}
  PASSWORD=${4}

  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # ---------------------------------------------------- #
    # database settings                                    #
    # ---------------------------------------------------- #

    # The database host
    \$Self->{DatabaseHost} = '${HOST}';

    # The database name
    \$Self->{Database} = '${NAME}';

    # The database user
    \$Self->{DatabaseUser} = '${USER}';

    # The password of database user. You also can use bin/otrs.Console.pl Maint::Database::PasswordCrypt
    # for crypted passwords
    \$Self->{DatabasePw} = '${PASSWORD}';

EOF
)
}

function gen_add_database_mysql() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # The database DSN for MySQL ==> more: "perldoc DBD::mysql"
    \$Self->{DatabaseDSN} = "DBI:mysql:database=\$Self->{Database};host=\$Self->{DatabaseHost};";

EOF
)
}

function gen_add_database_postgresql() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # The database DSN for PostgreSQL ==> more: "perldoc DBD::Pg"
    # if you want to use a TCP/IP connection
    \$Self->{DatabaseDSN} = "DBI:Pg:dbname=\$Self->{Database};host=\$Self->{DatabaseHost};";

EOF
)
}

function gen_add_fs_root_dir() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    # ---------------------------------------------------- #
    # fs root directory
    # ---------------------------------------------------- #
    \$Self->{Home} = '/opt/otrs';

EOF
)
}

function gen_add_mailing_sendmail() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    \$Self->{'SendmailModule'}      = 'Kernel::System::Email::Sendmail';
    \$Self->{'SendmailModule::CMD'} = '/usr/sbin/sendmail -i -f';

EOF
)
}

function gen_add_mailing_smtp() {
  HOST=${1}
  PORT=${2}
  USER=${3}
  PASSWORD=${4}
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    \$Self->{'SendmailModule'} = 'Kernel::System::Email::SMTP';
    \$Self->{'SendmailModule::Host'} = '${ZNUNY_MAILING_HOST}';
    \$Self->{'SendmailModule::Port'} = '${ZNUNY_MAILING_PORT}';
    \$Self->{'SendmailModule::AuthUser'} = '${ZNUNY_MAILING_USER}';
    \$Self->{'SendmailModule::AuthPassword'} = '${ZNUNY_MAILING_PASSWORD}';

EOF
)
}

function gen_add_customers_backend() {
  BLOCK="${1}"

  while IFS= read -r LINE; do
    echo "    ${LINE}" >> ${CONFIG_PATH}
  done <<< "${BLOCK}"

  echo "" >> ${CONFIG_PATH}
}

function gen_add_customers_synchro() {
  BLOCK="${1}"

  while IFS= read -r LINE; do
    echo "    ${LINE}" >> ${CONFIG_PATH}
  done <<< "${BLOCK}"

  echo "" >> ${CONFIG_PATH}
}

function gen_add_agents_backend() {
  BLOCK="${1}"

  while IFS= read -r LINE; do
    echo "    ${LINE}" >> ${CONFIG_PATH}
  done <<< "${BLOCK}"

  echo "" >> ${CONFIG_PATH}
}

function gen_add_agents_synchro() {
  BLOCK="${1}"

  while IFS= read -r LINE; do
    echo "    ${LINE}" >> ${CONFIG_PATH}
  done <<< "${BLOCK}"

  echo "" >> ${CONFIG_PATH}
}

function gen_add_return() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
    return 1;
}

EOF
)
}

function gen_add_system_stuff() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}
# # ---------------------------------------------------- #
# # needed system stuff (don't edit this)                #
# # ---------------------------------------------------- #
use Kernel::Config::Defaults; # import Translatable()
use parent qw(Kernel::Config::Defaults);

EOF
)
}

function gen_add_end() {
  CONTENT=$(cat << EOF | tee -a ${CONFIG_PATH}

# -----------------------------------------------------#

1;

EOF
)
}

# #
# #    $ENV{ORACLE_HOME}     = '/path/to/your/oracle';
# #    $ENV{NLS_DATE_FORMAT} = 'YYYY-MM-DD HH24:MI:SS';
# #    $ENV{NLS_LANG}        = 'AMERICAN_AMERICA.AL32UTF8';
#     # ---------------------------------------------------- #
#     # insert your own config settings "here"               #
#     # config settings taken from Kernel/Config/Defaults.pm #
#     # ---------------------------------------------------- #
#     # $Self->{SessionUseCookie} = 0;
#     # $Self->{CheckMXRecord} = 0;
#
#     # ---------------------------------------------------- #
#     # data inserted by installer                           #
#     # ---------------------------------------------------- #
#     # $DIBI$

# :command.command_functions

# :command.function
zcli_config_apache_command() {
  # src/config_apache_command.sh
  set_env_znuny

  customLogger "info" "config_apache" "Create the virtualhost to expose Znuny"
  ln -s /opt/otrs/scripts/apache2-httpd.include.conf /etc/apache2/conf-available/zzz_znuny.conf || true

  customLogger "info" "config_apache" "Enable then add rewrite rules"
  if [[ ! -z ${ZNUNY_APACHE_REWRITE_RULES} ]]; then
    echo -e "\n###\n#Add custom rewrite rules\n###" >> /etc/apache2/conf-available/zzz_znuny.conf
    echo "<IfModule mod_rewrite.c>" >> /etc/apache2/conf-available/zzz_znuny.conf
    echo "    RewriteEngine on" >> /etc/apache2/conf-available/zzz_znuny.conf

    while IFS= read -r RULE; do
      echo "        ${RULE}" >> /etc/apache2/conf-available/zzz_znuny.conf
    done <<< "${ZNUNY_APACHE_REWRITE_RULES}"

    echo -e "</IfModule>\n" >> /etc/apache2/conf-available/zzz_znuny.conf
  fi

  #echo -e "ErrorLogFormat \"{ \\"time\\":\\"%{%Y-%m-%d}tT%{%T}t.%{msec_frac}tZ\\", \\"function\\" : \\"[%-m:%l]\\" , \\"process\\" : \\"[pid %P:tid %T]\\" , \\"message\\" : \\"%M\\" , \\"referer\\"\\ : \\"%{Referer}i\\" },\""

  #echo -e "LogFormat \\"{ \\"time\\":\\"%{%Y-%m-%d}tT%{%T}t.%{msec_frac}tZ\\", \\"process\\":\\"%D\\", \\"filename\\":\\"%f\\", \\"remoteIP\\":\\"%a\\", \\"host\\":\\"%V\\", \\"request\\":\\"%U\\", \\"query\\":\\"%q\\", \\"method\\":\\"%m\\", \\"status\\":\\"%>s\\", \\"userAgent\\":\\"%{User-agent}i\\", \\"referer\\":\\"%{Referer}i\\" },\" combined"

  customLogger "info" "config_apache" "Enable required Apache modules - Part 1"
  a2enmod perl headers deflate filter cgi 2>&1>/dev/null

  customLogger "info" "config_apache" "Disable useless Apache modules"
  a2dismod mpm_event 2>&1>/dev/null

  customLogger "info" "config_apache" "Enable required Apache modules - Part 2"
  a2enmod mpm_prefork 2>&1>/dev/null

  customLogger "info" "config_apache" "Enable the virtualhost to expose Znuny"
  a2enconf zzz_znuny 2>&1>/dev/null

}

# :command.function
zcli_config_crons_command() {
  # src/config_crons_command.sh
  CRONS_PATH="/opt/otrs/var/cron"

  customLogger "info" "config_cron" "Create crons"
  for CRON in $(ls ${CRONS_PATH}/*.dist); do
    cp ${CRON} $(basename $foo .dist)
  done

}

# :command.function
zcli_config_customers_command() {
  # src/config_customers_command.sh
  echo "# this file is located in 'src/config_customers_command.sh'"
  echo "# code for 'zcli config customers' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
zcli_config_database_command() {
  # src/config_database_command.sh
  sleep 30

  case ${ZNUNY_DATABASE_TYPE} in
    "mysql")
      if database_check_mysql "${ZNUNY_DATABASE_HOST}" "${ZNUNY_DATABASE_PORT}" "${ZNUNY_DATABASE_NAME}" "${ZNUNY_DATABASE_USER}" "${ZNUNY_DATABASE_PASSWORD}"; then
        customLogger "warn" "config_database" "SKIP: The database is not empty"
      else
        customLogger "info" "config_database" "Initialize the database schemas"
        database_init_mysql "${ZNUNY_DATABASE_HOST}" "${ZNUNY_DATABASE_PORT}" "${ZNUNY_DATABASE_NAME}" "${ZNUNY_DATABASE_USER}" "${ZNUNY_DATABASE_PASSWORD}"
      fi
    ;;
    "pgsql")
      if database_check_pgsql "${ZNUNY_DATABASE_HOST}" "${ZNUNY_DATABASE_PORT}" "${ZNUNY_DATABASE_NAME}" "${ZNUNY_DATABASE_USER}" "${ZNUNY_DATABASE_PASSWORD}"; then
        customLogger "warn" "config_database" "SKIP: The database is not empty"
      else
        customLogger "info" "config_database" "Initialize the database schemas"
        database_init_pgsql "${ZNUNY_DATABASE_HOST}" "${ZNUNY_DATABASE_PORT}" "${ZNUNY_DATABASE_NAME}" "${ZNUNY_DATABASE_USER}" "${ZNUNY_DATABASE_PASSWORD}"
      fi
    ;;
    *)
      customLogger "error" "config_database" "Failed to initialize any database. Wrong type passed in variable ZNUNY_DATABASE_TYPE"
    ;;
  esac

}

# :command.function
zcli_config_operators_command() {
  # src/config_operators_command.sh
  echo "# this file is located in 'src/config_operators_command.sh'"
  echo "# code for 'zcli config operators' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
zcli_config_znuny_command() {
  # src/config_znuny_command.sh
  CONFIG_PATH="/opt/otrs/Kernel/Config.pm"

  set_env_database
  set_env_mailing

  customLogger "info" "config_znuny" "Check if the config file already exists"
  if [[ -f "${CONFIG_PATH}" ]]; then
    customLogger "warn" "config_znuny" "The configuration file of Znuny already exists and will be replaced"
    rm ${CONFIG_PATH}
  fi

  customLogger "info" "config_znuny" "Create the configuration of Znuny"
  touch ${CONFIG_PATH}

  customLogger "info" "config_znuny" "Generate the licence"
  gen_add_licence

  customLogger "info" "config_znuny" "Generate packages"
  gen_add_package

  customLogger "info" "config_znuny" "Generate uses"
  gen_add_use

  customLogger "info" "config_znuny" "Generate sub"
  gen_add_sub

  customLogger "info" "config_znuny" "Generate database connection"
  gen_add_database_credentials "${ZNUNY_DATABASE_HOST}" "${ZNUNY_DATABASE_NAME}" "${ZNUNY_DATABASE_USER}" "${ZNUNY_DATABASE_PASSWORD}"

  customLogger "info" "config_znuny" "Generate the database driver"
  case ${ZNUNY_DATABASE_TYPE} in
    "mysql")
      gen_add_database_mysql
      ;;
    "pgsql")
      gen_add_database_postgresql
      ;;
  esac

  customLogger "info" "config_znuny" "Generate the filesystem root directory"
  gen_add_fs_root_dir

  customLogger "info" "config_znuny" "Generate mailing configurations"
  case ${ZNUNY_MAILING_TYPE} in
    "internal")
      gen_add_mailing_sendmail

      ;;
    "external")
      gen_add_mailing_smtp ${ZNUNY_MAILING_HOST} ${ZNUNY_MAILING_PORT} ${ZNUNY_MAILING_USER} ${ZNUNY_MAILING_PASSWORD}
      ;;
  esac

  customLogger "info" "config_znuny" "Generate customers backends"
  for i in {1..9}; do
    COMPOSED_VAR="ZNUNY_CUSTOMER_BACKEND_${i}"
    if [[ ! -z ${!COMPOSED_VAR} ]]; then
      gen_add_customers_backend "${!COMPOSED_VAR}"
    fi
  done

  customLogger "info" "config_znuny" "Generate customers synchronizations"
  for i in {1..9}; do
    COMPOSED_VAR="ZNUNY_CUSTOMER_SYNCHRO_${i}"
    if [[ ! -z ${!COMPOSED_VAR} ]]; then
      gen_add_customers_synchro "${!COMPOSED_VAR}"
    fi
  done

  customLogger "info" "config_znuny" "Generate agents backends"
  for i in {1..9}; do
    COMPOSED_VAR="ZNUNY_AGENTS_BACKEND_${i}"
    if [[ ! -z ${!COMPOSED_VAR} ]]; then
      gen_add_agents_backend "${!COMPOSED_VAR}"
    fi
  done

  customLogger "info" "config_znuny" "Generate agents synchronizations"
  for i in {1..9}; do
    COMPOSED_VAR="ZNUNY_AGENTS_SYNCHRO_${i}"
    if [[ ! -z ${!COMPOSED_VAR} ]]; then
      gen_add_agents_synchro "${!COMPOSED_VAR}"
    fi
  done

  customLogger "info" "config_znuny" "Generate the configuration return"
  gen_add_return

  customLogger "info" "config_znuny" "Generate the system stuffs"
  gen_add_system_stuff

  customLogger "info" "config_znuny" "End file"
  gen_add_end

}

# :command.function
zcli_check_modules_command() {
  # src/check_modules_command.sh
  customLogger "info" "check_modules" "Check Perl modules"
  su -c "/opt/otrs/bin/otrs.CheckModules.pl --all 2>&1>/dev/null" -s /bin/bash otrs

  # customLogger "info" "check_modules" "Ensure all packages are installed"
  customLogger "info" "check_modules" "Check packages installations"
  su -c "/opt/otrs/bin/otrs.Console.pl Admin::Package::ReinstallAll" -s /bin/bash otrs

}

# :command.function
zcli_check_config_command() {
  # src/check_config_command.sh
  customLogger "info" "check_config" "Rebuild configuration"
  su -c "/opt/otrs/bin/otrs.Console.pl Maint::Config::Rebuild --cleanup" -s /bin/sh otrs

}

# :command.function
zcli_download_command() {
  # src/download_command.sh
  DESTINATION="/tmp/znuny-${CONFIG_ZNUNY_VERSION}.tar.gz"

  customLogger "info" "download" "Download the version ${CONFIG_ZNUNY_VERSION} of the archive of Znuny"
  curl -sS \
    -o ${DESTINATION} \
    https://download.znuny.org/releases/znuny-${CONFIG_ZNUNY_VERSION}.tar.gz

  customLogger "info" "download" "Check the archive integrity"
  if [ ! $(md5sum ${DESTINATION} | awk '{print $1}') == "${CONFIG_ZNUNY_CHECKSUM}" ]; then
      customLogger "error" "The archive of the version ${CONFIG_ZNUNY_VERSION} of Znuny failed to pass the sum check with the hash ${CONFIG_ZNUNY_CHECKSUM}"
      exit 1
  fi

  customLogger "info" "download" "Extract the source code"
  tar -xzf ${DESTINATION} -C /opt/otrs --strip-components=1

  customLogger "info" "download" "Delete the archive of Znuny"
  rm -f ${DESTINATION}

}

# :command.function
zcli_init_command() {
  # src/init_command.sh
  zcli download

  zcli user system

  zcli config znuny

  zcli config apache

  zcli config crons

  zcli user permissions

  zcli config database

  zcli check modules

  zcli check config

  zcli user admin

  # zcli dev

  zcli run

  # sleep 1000000

}

# :command.function
zcli_migration_database_command() {
  # src/migration_database_command.sh

  if [[ "${args[type]}" == "mysql" ]]; then
      echo "mysqldump -u ${args[-u]} -h ${args[-h]} -P ${args[-p]} -p ${args[-w]} ${args[-n]} > /tmp/znuny-db-dump.sql"
      sleep 3
      echo "mysql -u ${ZNUNY_DATABASE_USER} -h ${ZNUNY_DATABASE_HOST} -P ${ZNUNY_DATABASE_PORT} -p ${ZNUNY_DATABASE_PASSWORD} ${ZNUNY_DATABASE_NAME} < /tmp/znuny-db-dump.sql"
  elif [[ "${args[type]}" == "pgsql" ]]; then
      echo "PGPASSWORD=${args[-w]} pg_dump -U ${args[-u]} -h ${args[-h]} -p ${args[-p]} -d ${args[-n]} -f /tmp/znuny-db-dump.sql"
      sleep 3
      echo "PGPASSWORD=${ZNUNY_DATABASE_PASSWORD} pg_restore -U ${ZNUNY_DATABASE_USER} -h ${ZNUNY_DATABASE_HOST} -p ${ZNUNY_DATABASE_PORT} -d ${ZNUNY_DATABASE_NAME} /tmp/znuny-db-dump.sql"
  fi

}

# :command.function
zcli_migration_s3_command() {
  # src/migration_s3_command.sh
  echo -e "
  apt-get update \
      && apt-get install -y awscli \
      && apt-get clean all

  AWS_ACCESS_KEY_ID="${args[-i]}"
  AWS_SECRET_ACCESS_KEY="${args[-t]}"

  aws s3api get-object --endpoint-url ${args[-h]} --bucket ${args[-b]} --key ${args[-o]} /tmp/znuny-db-dump.sql
  "
}

# :command.function
zcli_migration_local_command() {
  # src/migration_local_command.sh
  echo "${args[path]}"
}

# :command.function
zcli_run_command() {
  # src/run_command.sh
  customLogger "info" "run" "Launch the daemon of Znuny"
  su -c "/opt/otrs/bin/otrs.Daemon.pl start" -s /bin/sh otrs

  customLogger "info" "run" "Launch Crons of Znuny"
  su -c "/opt/otrs/bin/Cron.sh start" -s /bin/bash otrs

  customLogger "info" "run" "Launch the web server"
  /usr/sbin/apache2ctl -D FOREGROUND

}

# :command.function
zcli_user_admin_command() {
  # src/user_admin_command.sh
  customLogger "info" "user_system" "Create the application admin user: '${ZNUNY_USER_ADMIN_NAME}'"
  su -c "/opt/otrs/bin/otrs.Console.pl Admin::User::SetPassword ${ZNUNY_USER_ADMIN_NAME} ${ZNUNY_USER_ADMIN_PASSWORD}" -s /bin/sh otrs

}

# :command.function
zcli_user_permissions_command() {
  # src/user_permissions_command.sh
  APP_USER="otrs"

  customLogger "info" "user_permissions" "Set the permission for the user onto the applications directories"
  /opt/otrs/bin/otrs.SetPermissions.pl 2>&1>/dev/null

}

# :command.function
zcli_user_system_command() {
  # src/user_system_command.sh
  APP_USER="otrs"

  customLogger "info" "user_system" "Create the system user '${APP_USER}'"
  useradd -d /opt/otrs -c 'Znuny user' -g www-data -s /bin/bash -M -N ${APP_USER} 2>&1>/dev/null || true

  zcli user permissions

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        zcli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    config)
      action="config"
      shift
      zcli_config_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      zcli_check_parse_requirements "$@"
      shift $#
      ;;

    download)
      action="download"
      shift
      zcli_download_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      zcli_init_parse_requirements "$@"
      shift $#
      ;;

    migration)
      action="migration"
      shift
      zcli_migration_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      zcli_run_parse_requirements "$@"
      shift $#
      ;;

    user)
      action="user"
      shift
      zcli_user_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    apache)
      action="apache"
      shift
      zcli_config_apache_parse_requirements "$@"
      shift $#
      ;;

    crons)
      action="crons"
      shift
      zcli_config_crons_parse_requirements "$@"
      shift $#
      ;;

    customers)
      action="customers"
      shift
      zcli_config_customers_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      zcli_config_database_parse_requirements "$@"
      shift $#
      ;;

    operators)
      action="operators"
      shift
      zcli_config_operators_parse_requirements "$@"
      shift $#
      ;;

    znuny)
      action="znuny"
      shift
      zcli_config_znuny_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_config_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_apache_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_apache_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config apache"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_crons_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_crons_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config crons"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_customers_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_customers_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config customers"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config database"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_operators_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_operators_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config operators"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_config_znuny_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_config_znuny_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config znuny"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    modules)
      action="modules"
      shift
      zcli_check_modules_parse_requirements "$@"
      shift $#
      ;;

    config)
      action="config"
      shift
      zcli_check_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_check_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_check_modules_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_check_modules_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check modules"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_check_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_check_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_download_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_download_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="download"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_migration_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_migration_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    database)
      action="database"
      shift
      zcli_migration_database_parse_requirements "$@"
      shift $#
      ;;

    s3)
      action="s3"
      shift
      zcli_migration_s3_parse_requirements "$@"
      shift $#
      ;;

    local)
      action="local"
      shift
      zcli_migration_local_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_migration_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_migration_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help)
        long_usage=yes
        zcli_migration_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="migration database"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      -h)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-h']="$2"
          shift
          shift
        else
          printf "%s\n" "-h requires an argument: -h HOST" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-p']="$2"
          shift
          shift
        else
          printf "%s\n" "-p requires an argument: -p PORT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-n']="$2"
          shift
          shift
        else
          printf "%s\n" "-n requires an argument: -n NAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-u']="$2"
          shift
          shift
        else
          printf "%s\n" "-u requires an argument: -u USER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -w)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-w']="$2"
          shift
          shift
        else
          printf "%s\n" "-w requires an argument: -w PASSWORD" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['type']+x} ]]; then

          args['type']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['type']+x} ]]; then
    printf "missing required argument: TYPE\nusage: zcli migration database TYPE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['-h']+x} ]]; then
    printf "missing required flag: -h HOST\n" >&2
    exit 1
  fi
  if [[ -z ${args['-p']+x} ]]; then
    printf "missing required flag: -p PORT\n" >&2
    exit 1
  fi
  if [[ -z ${args['-n']+x} ]]; then
    printf "missing required flag: -n NAME\n" >&2
    exit 1
  fi
  if [[ -z ${args['-u']+x} ]]; then
    printf "missing required flag: -u USER\n" >&2
    exit 1
  fi
  if [[ -z ${args['-w']+x} ]]; then
    printf "missing required flag: -w PASSWORD\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ -n ${args['type']} ]] && [[ ! ${args['type']} =~ ^(pgsql|mysql)$ ]]; then
    printf "%s\n" "type must be one of: pgsql, mysql" >&2
    exit 1
  fi

}

# :command.parse_requirements
zcli_migration_s3_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help)
        long_usage=yes
        zcli_migration_s3_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="migration s3"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      -b)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-b']="$2"
          shift
          shift
        else
          printf "%s\n" "-b requires an argument: -b BUCKET" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -h)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-h']="$2"
          shift
          shift
        else
          printf "%s\n" "-h requires an argument: -h HOST" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -i)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-i']="$2"
          shift
          shift
        else
          printf "%s\n" "-i requires an argument: -i IDENTITY" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-o']="$2"
          shift
          shift
        else
          printf "%s\n" "-o requires an argument: -o OBJECT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['-t']="$2"
          shift
          shift
        else
          printf "%s\n" "-t requires an argument: -t TOKEN" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['-b']+x} ]]; then
    printf "missing required flag: -b BUCKET\n" >&2
    exit 1
  fi
  if [[ -z ${args['-h']+x} ]]; then
    printf "missing required flag: -h HOST\n" >&2
    exit 1
  fi
  if [[ -z ${args['-i']+x} ]]; then
    printf "missing required flag: -i IDENTITY\n" >&2
    exit 1
  fi
  if [[ -z ${args['-o']+x} ]]; then
    printf "missing required flag: -o OBJECT\n" >&2
    exit 1
  fi
  if [[ -z ${args['-t']+x} ]]; then
    printf "missing required flag: -t TOKEN\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
zcli_migration_local_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_migration_local_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="migration local"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['path']+x} ]]; then

          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['path']+x} ]]; then
    printf "missing required argument: PATH\nusage: zcli migration local PATH\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
zcli_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    admin)
      action="admin"
      shift
      zcli_user_admin_parse_requirements "$@"
      shift $#
      ;;

    permissions)
      action="permissions"
      shift
      zcli_user_permissions_parse_requirements "$@"
      shift $#
      ;;

    system)
      action="system"
      shift
      zcli_user_system_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      zcli_user_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_user_admin_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_user_admin_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="user admin"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_user_permissions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_user_permissions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="user permissions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
zcli_user_system_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        zcli_user_system_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="user system"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="6.5.3.1"
  long_usage=''
  set -e

  # src/initialize.sh
  CONFIG_FILE="/etc/zcli/zcli.ini"

  CONFIG_ZNUNY_VERSION=$(config_get "CONFIG_ZNUNY_VERSION")
  CONFIG_ZNUNY_CHECKSUM=$(config_get "CONFIG_ZNUNY_CHECKSUM")

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "config") zcli_config_command ;;
    "config apache") zcli_config_apache_command ;;
    "config crons") zcli_config_crons_command ;;
    "config customers") zcli_config_customers_command ;;
    "config database") zcli_config_database_command ;;
    "config operators") zcli_config_operators_command ;;
    "config znuny") zcli_config_znuny_command ;;
    "check") zcli_check_command ;;
    "check modules") zcli_check_modules_command ;;
    "check config") zcli_check_config_command ;;
    "download") zcli_download_command ;;
    "init") zcli_init_command ;;
    "migration") zcli_migration_command ;;
    "migration database") zcli_migration_database_command ;;
    "migration s3") zcli_migration_s3_command ;;
    "migration local") zcli_migration_local_command ;;
    "run") zcli_run_command ;;
    "user") zcli_user_command ;;
    "user admin") zcli_user_admin_command ;;
    "user permissions") zcli_user_permissions_command ;;
    "user system") zcli_user_system_command ;;
  esac
}

initialize
run "$@"
